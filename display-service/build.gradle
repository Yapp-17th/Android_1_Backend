buildscript {
    ext {
        springBootVersion = '2.0.7.RELEASE'
        springCloudVersion = 'Finchley.SR2'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'pl.allegro.tech.build.axion-release' version '1.9.1'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'publishing'
    id "org.asciidoctor.convert" version "1.5.3"
}

group = 'org.picon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    compile('org.springframework.retry:spring-retry:1.2.2.RELEASE')  // spring cloud requires spring-retry for auto-retry
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')  // To use Feign
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client') // 3. To use Eureka client
    compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')  // 2. To use ribbon
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix') // 1. To use spring-cloud-hystrix

//    // wiremock
//    testImplementation('com.github.tomakehurst:wiremock:2.26.3')
//    runtime 'org.atteo:evo-inflector:1.2.2'
//
//    // wiremock-restdocs
//    testCompile 'com.jayway.jsonpath:json-path'
//    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
//    testCompile "com.epages:restdocs-wiremock:0.7.27"

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE'


}

dependencyManagement {
    imports {
//        ext['spring-restdocs.version'] = '1.2.2.RELEASE'
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}


// ========== <restdocs-wiremock> ==========

//asciidoctor {
//    attributes 'snippets': snippetsDir
//    inputs.dir snippetsDir
//    dependsOn test
//}
//
//jar {
//    dependsOn asciidoctor
//    from ("${asciidoctor.outputDir}/html5") {
//        into 'static/docs'
//    }
//}
//
//task wiremockJar(type: Jar) {
//    description = 'Generates the jar file containing the wiremock stubs for your REST API.'
//    group = 'Build'
//    classifier = 'wiremock'
//    dependsOn project.tasks.test
//    from (snippetsDir) {
//        include '**/wiremock-stub.json'
//        into "wiremock/${project.name}/mappings"
//    }
//}
//model {
//    publishing {
//        publications {
//            wiremockJar(MavenPublication) {
//                from project.components.java
//                artifact project.tasks.wiremockJar {
//                    classifier "wiremock"
//                }
//            }
//        }
//    }
//}

//eclipseJdt.onlyIf { false }
//cleanEclipseJdt.onlyIf { false }
//assemble.dependsOn(':restdocs-wiremock:publishToMavenLocal')
//compileJava.dependsOn(':restdocs-wiremock:publishToMavenLocal')


// ========== <restdocs-wiremock end> ==========

// ========== <restdocs> ==========

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    println "=====start asciidoctor"
    //asciidoctor 실행전 기존에 생성된 API 문서 삭제
    delete file('src/main/resources/static/docs')
}
asciidoctor.doLast {
    println "=====finish asciidoctor"
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5/") {
        into 'static/docs'
    }
}